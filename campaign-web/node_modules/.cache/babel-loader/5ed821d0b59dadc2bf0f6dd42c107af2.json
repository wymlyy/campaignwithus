{"ast":null,"code":"var _jsxFileName = \"D:\\\\signup form\\\\Campaign-with-us\\\\campaign-web\\\\src\\\\components\\\\pages\\\\Post.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport '../../App.css';\nimport './post.css';\nimport { useParams } from 'react-router-dom';\nimport axios from \"axios\";\nimport { AuthContext } from '../../Context/AuthContext';\nimport Footer from '../Footer';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\nimport moment from 'moment';\nexport default function Post() {\n  let {\n    id\n  } = useParams();\n  const [postObject, setPostObject] = useState({});\n  const [title, setTitle] = useState(\"\");\n  const [topic, setTopic] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [postText, setPostText] = useState(\"\");\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n  const {\n    authState\n  } = useContext(AuthContext);\n  const [dateStart, setDateStart] = moment(postObject.startDate).format(\"DD-MM-YYYY HH:mm\");\n  const [updateMode, setUpdateMode] = useState(false);\n  useEffect(() => {\n    axios.get(`http://localhost:5000/posts/byId/${id}`).then(response => {\n      setPostObject(response.data);\n    });\n    axios.get(`http://localhost:5000/comments/${id}`).then(response => {\n      setComments(response.data);\n    });\n  }, []);\n\n  const addComment = () => {\n    axios.post(\"http://localhost:5000/comments/\", {\n      commentText: newComment,\n      PostId: id\n    }, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(response => {\n      if (response.data.error) {\n        alert(response.data.error);\n      } else {\n        const commentAdd = {\n          commentText: newComment,\n          username: response.data.username\n        };\n        setComments([...comments, commentAdd]);\n        setNewComment(\"\");\n        window.location.href = `/post/${id}`;\n      }\n    });\n  };\n\n  const deleteComment = commentId => {\n    axios.delete(`http://localhost:5000/comments/${commentId}`, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(() => {\n      setComments(comments.filter(val => {\n        return val.id != commentId;\n      }));\n    });\n  };\n\n  const deletePost = id => {\n    axios.delete(`http://localhost:5000/posts/${id}`, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(() => {\n      window.location.href = '/';\n    });\n  };\n\n  const editPost = async () => {\n    try {\n      await axios.put(`http://localhost:5000/posts/${id}`, {\n        title: postObject.title,\n        topic: postObject.topic,\n        location: postObject.location,\n        author: postObject.username,\n        startTime: postObject.dateStart,\n        postText: ReactHtmlParser(postObject.postText)\n      });\n      setUpdateMode(false);\n    } catch (err) {}\n  };\n\n  const vistorClick = () => {\n    window.location.href = '/login';\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"postPage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"campaigns\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"posttitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 25\n    }\n  }, postObject.title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"infoContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"lineOne\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"postTopic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 33\n    }\n  }, \"Topic: \", postObject.topic), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"postLocation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 33\n    }\n  }, \"Location: \", postObject.location)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"lineTwo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"postAuthor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 33\n    }\n  }, \"Author: \", postObject.username), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"postDate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 33\n    }\n  }, \"Start Time: \", dateStart))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"postComment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"deletePost\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, authState.username === postObject.username && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"deletePostBtn\",\n    onClick: editPost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 29\n    }\n  }, \"Edit\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"deletePost\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, authState.username === postObject.username && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"deletePostBtn\",\n    onClick: () => {\n      deletePost(postObject.id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 29\n    }\n  }, \"Delete Post\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"postText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"textContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 25\n    }\n  }, ReactHtmlParser(postObject.postText))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comments\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"commentTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 25\n    }\n  }, \" Make your comment here\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addComment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    type: \"text\",\n    placeholder: \"Add your comment here...\",\n    autoComplete: \"off\",\n    value: newComment,\n    onChange: event => {\n      setNewComment(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"commentButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 25\n    }\n  }, localStorage.getItem(\"accessToken\") ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"commentBtn\",\n    type: \"submit\",\n    onClick: addComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 68\n    }\n  }, \"Comment\") : /*#__PURE__*/React.createElement(\"button\", {\n    className: \"commentBtn\",\n    type: \"submit\",\n    onClick: vistorClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 41\n    }\n  }, \"Comment\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"listOfComments\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 25\n    }\n  }, comments.map((comment, key) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: key,\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"commentUser\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 41\n      }\n    }, \"User: \", comment.username, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"dateposted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 96\n      }\n    }, moment(comment.createdAt).format(\"DD-MM-YYYY HH:mm:ss\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"textOfComment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 41\n      }\n    }, comment.commentText), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"commentBtnContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tooltip\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 45\n      }\n    }, authState.username === comment.username && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DeleteIcon, {\n      onClick: () => {\n        deleteComment(comment.id);\n      },\n      className: \"deleteIcon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 117\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"tooltipText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 73\n      }\n    }, \"Delete\")))));\n  }))))), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["D:/signup form/Campaign-with-us/campaign-web/src/components/pages/Post.js"],"names":["React","useEffect","useState","useContext","useParams","axios","AuthContext","Footer","DeleteIcon","ReactHtmlParser","processNodes","convertNodeToElement","htmlparser2","moment","Post","id","postObject","setPostObject","title","setTitle","topic","setTopic","location","setLocation","author","setAuthor","postText","setPostText","comments","setComments","newComment","setNewComment","authState","dateStart","setDateStart","startDate","format","updateMode","setUpdateMode","get","then","response","data","addComment","post","commentText","PostId","headers","accessToken","localStorage","getItem","error","alert","commentAdd","username","window","href","deleteComment","commentId","delete","filter","val","deletePost","editPost","put","startTime","err","vistorClick","event","target","value","map","comment","key","createdAt"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAO,eAAP;AACA,OAAO,YAAP;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,eAAP,IAA0BC,YAA1B,EAAwCC,oBAAxC,EAA8DC,WAA9D,QAAiF,mBAAjF;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC3B,MAAI;AAAEC,IAAAA;AAAF,MAASX,SAAS,EAAtB;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACoB,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACsB,MAAD,EAASC,SAAT,IAAsBvB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACwB,QAAD,EAAWC,WAAX,IAA0BzB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAAC0B,QAAD,EAAWC,WAAX,IAA0B3B,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAAC4B,UAAD,EAAaC,aAAb,IAA8B7B,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAE8B,IAAAA;AAAF,MAAgB7B,UAAU,CAACG,WAAD,CAAhC;AACA,QAAM,CAAC2B,SAAD,EAAYC,YAAZ,IAA4BrB,MAAM,CAACG,UAAU,CAACmB,SAAZ,CAAN,CAA6BC,MAA7B,CAAoC,kBAApC,CAAlC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BpC,QAAQ,CAAC,KAAD,CAA5C;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,KAAK,CAACkC,GAAN,CAAW,oCAAmCxB,EAAG,EAAjD,EAAoDyB,IAApD,CAA0DC,QAAD,IAAc;AACnExB,MAAAA,aAAa,CAACwB,QAAQ,CAACC,IAAV,CAAb;AACH,KAFD;AAIArC,IAAAA,KAAK,CAACkC,GAAN,CAAW,kCAAiCxB,EAAG,EAA/C,EAAkDyB,IAAlD,CAAwDC,QAAD,IAAc;AACjEZ,MAAAA,WAAW,CAACY,QAAQ,CAACC,IAAV,CAAX;AACH,KAFD;AAIH,GATQ,EASN,EATM,CAAT;;AAUA,QAAMC,UAAU,GAAG,MAAM;AAErBtC,IAAAA,KAAK,CAACuC,IAAN,CAAW,iCAAX,EAA8C;AAAEC,MAAAA,WAAW,EAAEf,UAAf;AAA2BgB,MAAAA,MAAM,EAAE/B;AAAnC,KAA9C,EACI;AACIgC,MAAAA,OAAO,EAAE;AACLC,QAAAA,WAAW,EAAEC,YAAY,CAACC,OAAb,CAAqB,aAArB;AADR;AADb,KADJ,EAKOV,IALP,CAKaC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,IAAT,CAAcS,KAAlB,EAAyB;AACrBC,QAAAA,KAAK,CAACX,QAAQ,CAACC,IAAT,CAAcS,KAAf,CAAL;AACH,OAFD,MAEO;AACH,cAAME,UAAU,GAAG;AACfR,UAAAA,WAAW,EAAEf,UADE;AAEfwB,UAAAA,QAAQ,EAAEb,QAAQ,CAACC,IAAT,CAAcY;AAFT,SAAnB;AAIAzB,QAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcyB,UAAd,CAAD,CAAX;AACAtB,QAAAA,aAAa,CAAC,EAAD,CAAb;AACAwB,QAAAA,MAAM,CAACjC,QAAP,CAAgBkC,IAAhB,GAAwB,SAAQzC,EAAG,EAAnC;AACH;AAEJ,KAlBL;AAmBH,GArBD;;AAuBA,QAAM0C,aAAa,GAAIC,SAAD,IAAe;AAEjCrD,IAAAA,KAAK,CAACsD,MAAN,CAAc,kCAAiCD,SAAU,EAAzD,EAA4D;AACxDX,MAAAA,OAAO,EAAE;AAAEC,QAAAA,WAAW,EAAEC,YAAY,CAACC,OAAb,CAAqB,aAArB;AAAf;AAD+C,KAA5D,EAGKV,IAHL,CAGU,MAAM;AACRX,MAAAA,WAAW,CACPD,QAAQ,CAACgC,MAAT,CAAiBC,GAAD,IAAS;AACrB,eAAOA,GAAG,CAAC9C,EAAJ,IAAU2C,SAAjB;AACH,OAFD,CADO,CAAX;AAKH,KATL;AAUH,GAZD;;AAcA,QAAMI,UAAU,GAAI/C,EAAD,IAAQ;AACvBV,IAAAA,KAAK,CACAsD,MADL,CACa,+BAA8B5C,EAAG,EAD9C,EACiD;AACzCgC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,WAAW,EAAEC,YAAY,CAACC,OAAb,CAAqB,aAArB;AAAf;AADgC,KADjD,EAIKV,IAJL,CAIU,MAAM;AACRe,MAAAA,MAAM,CAACjC,QAAP,CAAgBkC,IAAhB,GAAuB,GAAvB;AACH,KANL;AAQH,GATD;;AAWA,QAAMO,QAAQ,GAAG,YAAY;AACzB,QAAI;AACF,YAAM1D,KAAK,CAAC2D,GAAN,CAAW,+BAA8BjD,EAAG,EAA5C,EAA+C;AACjDG,QAAAA,KAAK,EAAEF,UAAU,CAACE,KAD+B;AAEjDE,QAAAA,KAAK,EAAEJ,UAAU,CAACI,KAF+B;AAGjDE,QAAAA,QAAQ,EAAEN,UAAU,CAACM,QAH4B;AAIjDE,QAAAA,MAAM,EAAER,UAAU,CAACsC,QAJ8B;AAKjDW,QAAAA,SAAS,EAAEjD,UAAU,CAACiB,SAL2B;AAMjDP,QAAAA,QAAQ,EAAEjB,eAAe,CAACO,UAAU,CAACU,QAAZ;AANwB,OAA/C,CAAN;AASAY,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAXD,CAWE,OAAO4B,GAAP,EAAY,CAAE;AACjB,GAbH;;AAiBA,QAAMC,WAAW,GAAG,MAAM;AACtBZ,IAAAA,MAAM,CAACjC,QAAP,CAAgBkC,IAAhB,GAAuB,QAAvB;AACH,GAFD;;AAIA,sBACI,uDACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAI,IAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BxC,UAAU,CAACE,KAAtC,CAFJ,eAGI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAmCF,UAAU,CAACI,KAA9C,CADJ,eAGI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAyCJ,UAAU,CAACM,QAApD,CAHJ,CADJ,eAMI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAqCN,UAAU,CAACsC,QAAhD,CADJ,eAEI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAuCrB,SAAvC,CAFJ,CANJ,CAHJ,CADJ,CADJ,eAoBI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACSD,SAAS,CAACsB,QAAV,KAAuBtC,UAAU,CAACsC,QAAlC,iBACG;AAAQ,IAAA,SAAS,EAAC,eAAlB;AACI,IAAA,OAAO,EAAGS,QADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFZ,CADA,eAUI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK/B,SAAS,CAACsB,QAAV,KAAuBtC,UAAU,CAACsC,QAAlC,iBACG;AAAQ,IAAA,SAAS,EAAC,eAAlB;AACI,IAAA,OAAO,EAAE,MAAM;AACXQ,MAAAA,UAAU,CAAC9C,UAAU,CAACD,EAAZ,CAAV;AACH,KAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFR,CAVJ,eAqBI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BN,eAAe,CAACO,UAAU,CAACU,QAAZ,CAA7C,CADJ,CArBJ,eAyBI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADJ,eAEI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAU,IAAA,IAAI,EAAC,MAAf;AAAsB,IAAA,WAAW,EAAC,0BAAlC;AAA6D,IAAA,YAAY,EAAC,KAA1E;AAAgF,IAAA,KAAK,EAAEI,UAAvF;AAAmG,IAAA,QAAQ,EAAGsC,KAAD,IAAW;AAAErC,MAAAA,aAAa,CAACqC,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AAAmC,KAA7J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFJ,eAKI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKrB,YAAY,CAACC,OAAb,CAAqB,aAArB,iBAAsC;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAA+B,IAAA,IAAI,EAAC,QAApC;AAA6C,IAAA,OAAO,EAAEP,UAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAtC,gBAEW;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAA+B,IAAA,IAAI,EAAC,QAApC;AAA6C,IAAA,OAAO,EAAEwB,WAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHhB,CALJ,eAcI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKvC,QAAQ,CAAC2C,GAAT,CAAa,CAACC,OAAD,EAAUC,GAAV,KAAkB;AAC5B,wBACI;AAAK,MAAA,GAAG,EAAEA,GAAV;AAAe,MAAA,SAAS,EAAC,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAsCD,OAAO,CAAClB,QAA9C,eAAuD;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8BzC,MAAM,CAAC2D,OAAO,CAACE,SAAT,CAAN,CAA0BtC,MAA1B,CAAiC,qBAAjC,CAA9B,CAAvD,CADJ,eAEI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgCoC,OAAO,CAAC3B,WAAxC,CAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0Bb,SAAS,CAACsB,QAAV,KAAuBkB,OAAO,CAAClB,QAA/B,iBAA4C,uDAAE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAE,MAAM;AAC/FG,QAAAA,aAAa,CAACe,OAAO,CAACzD,EAAT,CAAb;AACH,OAFuE;AAErE,MAAA,SAAS,EAAC,YAF2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAF,eAE1C;AAAM,MAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAF0C,CAAtE,CADJ,CAHJ,CADJ;AAaH,GAdA,CADL,CAdJ,CAzBJ,CApBJ,CADJ,eAgFI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhFJ,CADJ;AAqFH","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport '../../App.css';\r\nimport './post.css';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from \"axios\";\r\nimport { AuthContext } from '../../Context/AuthContext';\r\nimport Footer from '../Footer';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\r\nimport moment from 'moment';\r\n\r\nexport default function Post() {\r\n    let { id } = useParams();\r\n    const [postObject, setPostObject] = useState({});\r\n    const [title, setTitle] = useState(\"\");\r\n    const [topic, setTopic] = useState(\"\");\r\n    const [location, setLocation] = useState(\"\");\r\n    const [author, setAuthor] = useState(\"\");\r\n    const [postText, setPostText] = useState(\"\");\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState(\"\");\r\n    const { authState } = useContext(AuthContext);\r\n    const [dateStart, setDateStart] = moment(postObject.startDate).format(\"DD-MM-YYYY HH:mm\");\r\n    const [updateMode, setUpdateMode] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:5000/posts/byId/${id}`).then((response) => {\r\n            setPostObject(response.data);\r\n        });\r\n\r\n        axios.get(`http://localhost:5000/comments/${id}`).then((response) => {\r\n            setComments(response.data);\r\n        });\r\n\r\n    }, []);\r\n    const addComment = () => {\r\n\r\n        axios.post(\"http://localhost:5000/comments/\", { commentText: newComment, PostId: id },\r\n            {\r\n                headers: {\r\n                    accessToken: localStorage.getItem(\"accessToken\"),\r\n                },\r\n            }).then((response) => {\r\n                if (response.data.error) {\r\n                    alert(response.data.error);\r\n                } else {\r\n                    const commentAdd = {\r\n                        commentText: newComment,\r\n                        username: response.data.username\r\n                    };\r\n                    setComments([...comments, commentAdd]);\r\n                    setNewComment(\"\");\r\n                    window.location.href = `/post/${id}`;\r\n                }\r\n\r\n            })\r\n    };\r\n\r\n    const deleteComment = (commentId) => {\r\n\r\n        axios.delete(`http://localhost:5000/comments/${commentId}`, {\r\n            headers: { accessToken: localStorage.getItem(\"accessToken\") },\r\n        })\r\n            .then(() => {\r\n                setComments(\r\n                    comments.filter((val) => {\r\n                        return val.id != commentId;\r\n                    })\r\n                );\r\n            });\r\n    };\r\n\r\n    const deletePost = (id) => {\r\n        axios\r\n            .delete(`http://localhost:5000/posts/${id}`, {\r\n                headers: { accessToken: localStorage.getItem(\"accessToken\") },\r\n            })\r\n            .then(() => {\r\n                window.location.href = '/';\r\n            });\r\n\r\n    };\r\n\r\n    const editPost = async () => {\r\n        try {\r\n          await axios.put(`http://localhost:5000/posts/${id}`, {\r\n              title: postObject.title,\r\n              topic: postObject.topic,\r\n              location: postObject.location,\r\n              author: postObject.username,\r\n              startTime: postObject.dateStart,\r\n              postText: ReactHtmlParser(postObject.postText),\r\n              \r\n          });\r\n          setUpdateMode(false)\r\n        } catch (err) {}\r\n      };\r\n\r\n    \r\n\r\n    const vistorClick = () => {\r\n        window.location.href = '/login';\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className='postPage'>\r\n                <div className='campaigns'>\r\n                    <div className='overlay'>\r\n                        {}\r\n                        <h1 className='posttitle'>{postObject.title}</h1>\r\n                        <div className='infoContainer'>\r\n                            <div className='lineOne'>\r\n                                <div className='postTopic'>Topic: {postObject.topic}\r\n                                </div>\r\n                                <div className='postLocation'>Location: {postObject.location}</div>\r\n                            </div>\r\n                            <div className='lineTwo'>\r\n                                <div className='postAuthor'>Author: {postObject.username}</div>\r\n                                <div className='postDate'>Start Time: {dateStart}</div>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className='postComment'>\r\n                <div className=\"deletePost\">\r\n                        {authState.username === postObject.username && (\r\n                            <button className='deletePostBtn'\r\n                                onClick={ editPost}\r\n                            >\r\n                                Edit\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"deletePost\">\r\n                        {authState.username === postObject.username && (\r\n                            <button className='deletePostBtn'\r\n                                onClick={() => {\r\n                                    deletePost(postObject.id);\r\n                                }}\r\n                            >\r\n                                Delete Post\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                    <div className='postText'>\r\n                        <div className='textContent'>{ReactHtmlParser(postObject.postText)}</div>\r\n\r\n                    </div>\r\n                    <div className=\"comments\">\r\n                        <h1 className='commentTitle'> Make your comment here</h1>\r\n                        <div className='addComment'>\r\n                            <textarea type='text' placeholder=\"Add your comment here...\" autoComplete=\"off\" value={newComment} onChange={(event) => { setNewComment(event.target.value) }} />\r\n                        </div>\r\n                        <div className='commentButton'>\r\n                            {localStorage.getItem(\"accessToken\") ? <button className='commentBtn' type='submit' onClick={addComment}>\r\n                                Comment\r\n                            </button> : <button className='commentBtn' type='submit' onClick={vistorClick}>\r\n                                Comment\r\n                            </button>}\r\n\r\n                        </div>\r\n\r\n                        <div className='listOfComments'>\r\n                            {comments.map((comment, key) => {\r\n                                return (\r\n                                    <div key={key} className='comment'>\r\n                                        <label className='commentUser'>User: {comment.username}<span className='dateposted'>{moment(comment.createdAt).format(\"DD-MM-YYYY HH:mm:ss\")}</span></label>\r\n                                        <div className='textOfComment'>{comment.commentText}</div>\r\n                                        <div className='commentBtnContainer'>\r\n                                            <div className='tooltip'>{authState.username === comment.username && (<><DeleteIcon onClick={() => {\r\n                                                deleteComment(comment.id);\r\n                                            }} className='deleteIcon' /><span className='tooltipText'>Delete</span></>)}</div>\r\n                                        </div>\r\n\r\n\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    );\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}