{"ast":null,"code":"var _jsxFileName = \"D:\\\\signup form\\\\Campaign-with-us\\\\campaign-web\\\\src\\\\components\\\\pages\\\\Campaigns.js\";\nimport React, { useEffect, useState } from \"react\";\nimport '../../App.css';\nimport '../Cards.css';\nimport CardItem from '../CardItem';\nimport moment from \"moment\";\nimport axios from \"axios\";\nexport default function Campaigns() {\n  const [listOfPosts, setListOfPosts] = useState([]);\n  const [signedPosts, setSignedPosts] = useState([]);\n  useEffect(() => {\n    if (!localStorage.getItem(\"accessToken\")) {\n      window.location.href = '/login';\n    } else {}\n  }, []);\n\n  const signAPost = postId => {\n    axios.post(\"http://localhost:5000/signature\", {\n      PostId: postId\n    }, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(response => {\n      setListOfPosts(listOfPosts.map(post => {\n        if (post.id === postId) {\n          if (response.data.signed) {\n            return { ...post,\n              Signature: [...post.Signature, 0]\n            };\n          } else {\n            const signatureArray = post.Signature;\n            signatureArray.pop();\n            return { ...post,\n              Signature: signatureArray\n            };\n          }\n        } else {\n          return post;\n        }\n      }));\n\n      if (signedPosts.includes(postId)) {\n        setSignedPosts(signedPosts.filter(id => {\n          return id != postId;\n        }));\n      } else {\n        setSignedPosts([...signedPosts, postId]);\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"campaigns\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"campaignTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"Campaigns\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cards__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cards__wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"cards__items_campaign\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, listOfPosts.map((value, key) => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CardItem, {\n      key: key,\n      src: \"images/img-9.jpg\",\n      title: value.title,\n      text: value.postText,\n      topic: value.topic,\n      username: value.username,\n      dateTime: moment(value.createdAt).format(\"DD-MM-YYYY HH:mm:ss\"),\n      path: `/post/${value.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btnSign\",\n      onClick: () => {\n        signAPost(value.id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, \"Sign\"), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }, value.Signature.length));\n  }))))));\n}","map":{"version":3,"sources":["D:/signup form/Campaign-with-us/campaign-web/src/components/pages/Campaigns.js"],"names":["React","useEffect","useState","CardItem","moment","axios","Campaigns","listOfPosts","setListOfPosts","signedPosts","setSignedPosts","localStorage","getItem","window","location","href","signAPost","postId","post","PostId","headers","accessToken","then","response","map","id","data","signed","Signature","signatureArray","pop","includes","filter","value","key","title","postText","topic","username","createdAt","format","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport '../../App.css';\nimport '../Cards.css';\nimport CardItem from '../CardItem';\nimport moment from \"moment\";\nimport axios from \"axios\";\n\n\nexport default function Campaigns() {\n  const [listOfPosts, setListOfPosts] = useState([]);\n  const [signedPosts, setSignedPosts] = useState([]);\n\n  useEffect(() => {\n    if (!localStorage.getItem(\"accessToken\")) {\n      window.location.href = '/login';\n    } else {\n      \n    }\n    \n  }, []);\n\n  const signAPost = (postId) => {\n    axios.post(\"http://localhost:5000/signature\", {\n      PostId: postId\n    },\n      { headers: { accessToken: localStorage.getItem(\"accessToken\") } }\n    ).then((response) => {\n      setListOfPosts(listOfPosts.map((post) => {\n        if (post.id === postId) {\n          if (response.data.signed) {\n            return { ...post, Signature: [...post.Signature, 0] };\n          } else {\n            const signatureArray = post.Signature;\n            signatureArray.pop();\n            return { ...post, Signature: signatureArray };\n          }\n        } else {\n          return post;\n        }\n      }));\n      if (signedPosts.includes(postId)) {\n        setSignedPosts(\n          signedPosts.filter((id) => {\n            return id != postId;\n          })\n        );\n      } else {\n        setSignedPosts([...signedPosts, postId]);\n      }\n    });\n  };\n\n  return (\n    <>\n      <div className='campaigns'>\n        <div className='overlay'>\n          <h1 className='campaignTitle'>Campaigns</h1>\n        </div>\n      </div>\n\n      <div className='cards'>\n        <div className='cards__container'>\n          <div className='cards__wrapper' >\n\n            <ul className='cards__items_campaign'>\n              {listOfPosts.map((value, key) => {\n                return (\n                  <>\n                    <CardItem key={key}\n                      src='images/img-9.jpg'\n                      title={value.title}\n                      text={value.postText}\n                      topic={value.topic}\n                      username={value.username}\n                      dateTime={moment(value.createdAt).format(\"DD-MM-YYYY HH:mm:ss\")}\n                      path={`/post/${value.id}`}\n                    />\n                    <button className='btnSign' onClick={() => {\n                      signAPost(value.id);\n                    }}>Sign</button>\n                    <label>{ value.Signature.length}</label>\n                  </>\n                )\n              })}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}