{"ast":null,"code":"import React, { useEffect, useState } from \"react\";\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\nimport ReactPaginate from \"react-paginate\";\nimport '../../App.css';\nimport '../Cards.css';\nimport CardItem from '../CardItem';\nimport moment from \"moment\";\nimport axios from \"axios\";\nexport default function Campaigns() {\n  const [listOfPosts, setListOfPosts] = useState([]);\n  const [signedPosts, setSignedPosts] = useState([]);\n  const [pageNum, setPageNum] = useState(0);\n  const postsPerPage = 9;\n  const currentPage = postsPerPage * pageNum;\n  useEffect(() => {\n    if (!localStorage.getItem(\"accessToken\")) {\n      axios.get(\"http://localhost:5000/posts/visitors\").then(response => {\n        setListOfPosts(response.data.listOfPosts);\n        setSignedPosts(response.data.signedPosts.map(sign => {\n          return sign.PostId;\n        }));\n      });\n    } else {\n      axios.get(\"http://localhost:5000/posts\", {\n        headers: {\n          accessToken: localStorage.getItem(\"accessToken\")\n        }\n      }).then(response => {\n        setListOfPosts(response.data.listOfPosts);\n        setSignedPosts(response.data.signedPosts.map(sign => {\n          return sign.PostId;\n        }));\n      });\n    }\n  }, []);\n\n  const signAPost = postId => {\n    axios.post(\"http://localhost:5000/signatures\", {\n      PostId: postId\n    }, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(response => {\n      setListOfPosts(listOfPosts.map(post => {\n        if (post.id === postId) {\n          if (response.data.signed) {\n            return { ...post,\n              Signatures: [...post.Signatures, 0]\n            };\n          } else {\n            const signatureArray = post.Signatures;\n            signatureArray.pop();\n            return { ...post,\n              Signatures: signatureArray\n            };\n          }\n        } else {\n          return post;\n        }\n      }));\n\n      if (signedPosts.includes(postId)) {\n        setSignedPosts(signedPosts.filter(id => {\n          return id != postId;\n        }));\n      } else {\n        setSignedPosts([...signedPosts, postId]);\n      }\n    });\n  };\n\n  const vistorClick = () => {\n    window.location.href = '/login';\n  };\n\n  const displayPosts = listOfPosts.slice(currentPage, currentPage + postsPerPage).map(listOfPosts => {}); // return (\n  //   <>\n  //     <div className='campaigns'>\n  //       <div className='overlay'>\n  //         <h1 className='campaignTitle'>Campaigns</h1>\n  //       </div>\n  //     </div>\n  //     <div className='cards'>\n  //       <div className='cards__container'>\n  //         <div className='cards__wrapper' >\n  //           <ul className='cards__items_campaign'>\n  //             {listOfPosts.reverse().map((value, key) => {\n  //               return (\n  //                 <div className='campaignCard' key={key}>\n  //                   <CardItem key={key}\n  //                     src='images/img-9.jpg'\n  //                     title={value.title}\n  //                     text={value.postText.length > 80 ?\n  //                       ReactHtmlParser(value.postText.substring(0, 80)\n  //                         .replace(/<p>|<\\/p>|<ul>|<\\/ul>|<ol>|<\\/ol>|<li>|<\\/li>|<br>|<\\/br>|<em>|<\\/em>/g, '') + \"...\") :\n  //                       ReactHtmlParser(value.postText\n  //                         .replace(/<p>|<\\/p>|<ul>|<\\/ul>|<ol>|<\\/ol>|<li>|<\\/li>|<br>|<\\/br>|<em>|<\\/em>/g, ''))}\n  //                     topic={value.topic}\n  //                     username={value.username}\n  //                     dateTime={moment(value.createdAt).format(\"DD-MM-YYYY HH:mm:ss\")}\n  //                     path={`/post/${value.id}`}\n  //                   />\n  //                   <div className='signContainer'>\n  //                     {localStorage.getItem(\"accessToken\") ? (\n  //                       <div>\n  //                         {!signedPosts.includes(value.id) ? (<button className='btnSign' onClick={() => {\n  //                           signAPost(value.id);\n  //                         }}>Sign</button>) :\n  //                           (<button className='btnSigned' onClick={() => {\n  //                             signAPost(value.id);\n  //                           }}>Signed</button>)}\n  //                         <label className='signNo'>{value.Signatures.length}</label>\n  //                       </div>\n  //                     ) :\n  //                       (\n  //                         <div>\n  //                           <button className='btnSign' onClick={vistorClick}>Sign</button>\n  //                           <label className='signNo'>{value.Signatures.length}</label>\n  //                         </div>\n  //                       )}\n  //                   </div>\n  //                 </div>\n  //               )\n  //             })}\n  //           </ul>\n  //         </div>\n  //       </div>\n  //     </div>\n  //   </>\n  // )\n}","map":{"version":3,"sources":["D:/signup form/Campaign-with-us/campaign-web/src/components/pages/Campaigns.js"],"names":["React","useEffect","useState","ReactHtmlParser","processNodes","convertNodeToElement","htmlparser2","ReactPaginate","CardItem","moment","axios","Campaigns","listOfPosts","setListOfPosts","signedPosts","setSignedPosts","pageNum","setPageNum","postsPerPage","currentPage","localStorage","getItem","get","then","response","data","map","sign","PostId","headers","accessToken","signAPost","postId","post","id","signed","Signatures","signatureArray","pop","includes","filter","vistorClick","window","location","href","displayPosts","slice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\nimport ReactPaginate from \"react-paginate\";\nimport '../../App.css';\nimport '../Cards.css';\nimport CardItem from '../CardItem';\nimport moment from \"moment\";\nimport axios from \"axios\";\n\n\nexport default function Campaigns() {\n  const [listOfPosts, setListOfPosts] = useState([]);\n  const [signedPosts, setSignedPosts] = useState([]);\n  const [pageNum, setPageNum] = useState(0);\n  const postsPerPage = 9;\n  const currentPage = postsPerPage * pageNum;\n  \n\n  useEffect(() => {\n\n    if (!localStorage.getItem(\"accessToken\")) {\n      axios.get(\"http://localhost:5000/posts/visitors\").then((response) => {\n        setListOfPosts(response.data.listOfPosts);\n        setSignedPosts(response.data.signedPosts.map((sign) => {\n          return sign.PostId;\n        }))\n      });\n    } else {\n      axios.get(\"http://localhost:5000/posts\", {\n        headers: { accessToken: localStorage.getItem(\"accessToken\") },\n      }).then((response) => {\n        setListOfPosts(response.data.listOfPosts);\n        setSignedPosts(response.data.signedPosts.map((sign) => {\n          return sign.PostId;\n        }))\n      });\n    }\n  }, []);\n\n  const signAPost = (postId) => {\n    axios.post(\"http://localhost:5000/signatures\", {\n      PostId: postId\n    },\n      { headers: { accessToken: localStorage.getItem(\"accessToken\") } }\n    ).then((response) => {\n      setListOfPosts(listOfPosts.map((post) => {\n        if (post.id === postId) {\n          if (response.data.signed) {\n            return { ...post, Signatures: [...post.Signatures, 0] };\n          } else {\n            const signatureArray = post.Signatures;\n            signatureArray.pop();\n            return { ...post, Signatures: signatureArray };\n          }\n        } else {\n          return post;\n        }\n      })\n      );\n\n      if (signedPosts.includes(postId)) {\n        setSignedPosts(\n          signedPosts.filter((id) => {\n            return id != postId;\n          })\n        );\n      } else {\n        setSignedPosts([...signedPosts, postId]);\n      }\n    });\n  };\n\n  const vistorClick = () => {\n    window.location.href = '/login';\n  }\n\n  const displayPosts = listOfPosts.slice(currentPage, currentPage + postsPerPage)\n    .map((listOfPosts) => {\n      \n    });\n\n  // return (\n  //   <>\n  //     <div className='campaigns'>\n  //       <div className='overlay'>\n  //         <h1 className='campaignTitle'>Campaigns</h1>\n  //       </div>\n  //     </div>\n\n  //     <div className='cards'>\n  //       <div className='cards__container'>\n  //         <div className='cards__wrapper' >\n\n  //           <ul className='cards__items_campaign'>\n  //             {listOfPosts.reverse().map((value, key) => {\n  //               return (\n\n  //                 <div className='campaignCard' key={key}>\n  //                   <CardItem key={key}\n  //                     src='images/img-9.jpg'\n  //                     title={value.title}\n  //                     text={value.postText.length > 80 ?\n  //                       ReactHtmlParser(value.postText.substring(0, 80)\n  //                         .replace(/<p>|<\\/p>|<ul>|<\\/ul>|<ol>|<\\/ol>|<li>|<\\/li>|<br>|<\\/br>|<em>|<\\/em>/g, '') + \"...\") :\n  //                       ReactHtmlParser(value.postText\n  //                         .replace(/<p>|<\\/p>|<ul>|<\\/ul>|<ol>|<\\/ol>|<li>|<\\/li>|<br>|<\\/br>|<em>|<\\/em>/g, ''))}\n  //                     topic={value.topic}\n  //                     username={value.username}\n  //                     dateTime={moment(value.createdAt).format(\"DD-MM-YYYY HH:mm:ss\")}\n  //                     path={`/post/${value.id}`}\n  //                   />\n  //                   <div className='signContainer'>\n  //                     {localStorage.getItem(\"accessToken\") ? (\n  //                       <div>\n  //                         {!signedPosts.includes(value.id) ? (<button className='btnSign' onClick={() => {\n  //                           signAPost(value.id);\n  //                         }}>Sign</button>) :\n  //                           (<button className='btnSigned' onClick={() => {\n  //                             signAPost(value.id);\n  //                           }}>Signed</button>)}\n  //                         <label className='signNo'>{value.Signatures.length}</label>\n  //                       </div>\n  //                     ) :\n  //                       (\n  //                         <div>\n  //                           <button className='btnSign' onClick={vistorClick}>Sign</button>\n  //                           <label className='signNo'>{value.Signatures.length}</label>\n  //                         </div>\n  //                       )}\n  //                   </div>\n\n  //                 </div>\n\n  //               )\n  //             })}\n  //           </ul>\n  //         </div>\n  //       </div>\n  //     </div>\n  //   </>\n  // )\n}\n"]},"metadata":{},"sourceType":"module"}